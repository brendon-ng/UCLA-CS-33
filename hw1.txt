Brendon Ng
304-925-492
UCLA CS 33 Lec 1 Dis 1G
Proj. Glenn Reinman

Homework 1

Prob 2.71)
     A) What is wrong with the code, is that it ignores sign and does not
     	perform sign extraction.
	If the 8 bit byte that we want to extract has its most significant 
	bit as a 1, ie. it is negative, that 8 bit sequence represented as
	a 32 bit integer with this function will be right justified with 0's
	populating bits 8-31, therefore not representing the negativeness of 
	the 8 bit sequence.
     B)
	typedef unsigned packed_t;
	int byte(packed_t word, int bytenum);

        int xbyte(packed_t word, int bytenum)
	{
           int bitsToShift = (3-bytenum) << 3;
	   int left = word << bitsToShift;
	   return (left >> 24);
	}

Prob 2.82)
     A)	False.           Ex: x = INT_MIN, y = 0
     	    	   	    -x = INT_MIN,-y = 0
			     x < y but -x is not > than -y.  
     B) always true. (x+y)<<4+y-x = 16(x+y)+y-x = 16x-x+16y+y = 15x+17y
     C) always true. ~x + ~y + 1
     	       	   = (-1 - x) + (-1 - y) + 1
		   = -1 - x - y
		   = -1 - (x+y)
		   = ~(x+y)
     D) always true. negation of unsigned: -i = 2^32 - i
     	       	     RHS = ux - uy = ux + -uy = ux + 2^32 - uy
	LHS = -(unsigned)(y-x) = 2^32 - (unsigned)(y-x) 
			       = 2^32 - (uy - ux) = ux + 2^32 -uy = RHS
     E) always true. When we shift right by two, the two least significant bits
     	       	     are lost. When we shift it back to the right by two, our
		     most significant bits line up back with the left side as
		     they did before, but the two least significant bits will
		     now be 0. Whether the two least significant bits of the 
		     original x were 00, 01, 10, or 11, the 00 of the shifted
		     value will be <= the two right bits of x.
		    
     	
